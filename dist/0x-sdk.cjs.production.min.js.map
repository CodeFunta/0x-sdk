{"version":3,"file":"0x-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/types.ts","../src/contracts/factories/Erc20__factory.ts","../src/utils.ts","../src/errors.ts","../src/index.ts"],"sourcesContent":["export const ETH_FAKE_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\r\n\r\nexport const DAI_CONTRACT_ADDRESS_MAINNET =\r\n  '0x6b175474e89094c44da98b954eedeac495271d0f';\r\n\r\nexport const ROOT_STAGING_URL = 'https://staging.api.0x.org';\r\n\r\nexport const ROOT_URLS_BY_CHAIN_ID: { [key: string]: string } = {\r\n  '1': 'https://api.0x.org',\r\n  '3': 'https://ropsten.api.0x.org',\r\n  '137': 'https://polygon.api.0x.org',\r\n  '56': 'https://bsc.api.0x.org',\r\n  '10': 'https://optimism.api.0x.org',\r\n  '250': 'https://fantom.api.0x.org',\r\n  '42220': 'https://celo.api.0x.org',\r\n  '43114': 'https://avalanche.api.0x.org',\r\n};\r\n\r\nexport const CHAIN_IDS = {\r\n  MAINNET: 1,\r\n  ROPSTEN: 3,\r\n  GOERLI: 5,\r\n  OPTIMISM: 10,\r\n  BSC: 56,\r\n  POLYGON: 137,\r\n  FANTOM: 250,\r\n  CELO: 42220,\r\n  AVALANCHE: 43114,\r\n};\r\n\r\nexport const EXCHANGE_PROXY_ADDRESSES: Record<number, string> = {\r\n  1: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  5: '0xf91bb752490473b8342a3e964e855b9f9a2a668e',\r\n  10: '0xdef1abe32c034e558cdd535791643c58a13acc10',\r\n  56: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  137: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  250: '0xdef189deaef76e379df891899eb5a00a94cbc250',\r\n  42220: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  43114: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n};\r\n","import { Overrides } from '@ethersproject/contracts';\r\nimport { BaseProvider, TransactionRequest } from '@ethersproject/providers';\r\nimport { BigNumberish, Signer } from 'ethers';\r\n\r\nexport interface ZeroExSdkOptions {\r\n  apiUrl?: string;\r\n  apiUrls?: { [key: number]: string };\r\n  apiKey?: string;\r\n}\r\n\r\nexport type ResourceType = 'swap' | 'rfqm';\r\n\r\nexport interface FetchPriceOrQuoteArgs {\r\n  params: SwapParams;\r\n  chainId?: number;\r\n  resource?: ResourceType;\r\n  fetchFn?: Function;\r\n}\r\n\r\nexport interface RfqmTxStatusArgs {\r\n  txHash: string;\r\n  chainId?: number;\r\n  fetchFn?: Function;\r\n}\r\n\r\nexport interface FillOrderArgs {\r\n  quote: SwapQuote;\r\n  chainId: number;\r\n  signer: Signer;\r\n  txOptions?: TransactionRequest;\r\n}\r\n\r\nexport interface FillRfqmOrderArgs extends Omit<FillOrderArgs, 'quote'> {\r\n  quote: RfqmQuote;\r\n  fetchFn?: Function;\r\n}\r\n\r\ninterface PriceComparison {\r\n  name: string;\r\n  price: string | null;\r\n  gas: string | null;\r\n}\r\ninterface Order {\r\n  makerToken: string;\r\n  takerToken: string;\r\n  makerAmount: string;\r\n  takerAmount: string;\r\n  fillData: {\r\n    tokenAddressPath: string[];\r\n    router: string;\r\n  };\r\n  source: string;\r\n  sourcePathId: string;\r\n  type: number;\r\n}\r\n\r\ninterface LiquiditySource {\r\n  name: string;\r\n  proportion: string;\r\n}\r\n\r\nexport enum RfqmTypes {\r\n  MetaTransaction = 'metatransaction',\r\n  OtcOrder = 'otc',\r\n}\r\nexport interface SerializedExchangeProxyRfqm {\r\n  makerToken: string;\r\n  takerToken: string;\r\n  makerAmount: string;\r\n  takerAmount: string;\r\n  maker: string;\r\n  taker: string;\r\n  txOrigin: string;\r\n  expiryAndNonce: string;\r\n  verifyingContract: string;\r\n  chainId: number;\r\n  domain: EIP712DomainWithDefaultSchema;\r\n}\r\n\r\nexport interface EIP712DomainWithDefaultSchema {\r\n  name?: string;\r\n  version?: string;\r\n  chainId: number;\r\n  verifyingContract: string;\r\n}\r\nexport interface SwapParams {\r\n  sellToken?: string;\r\n  buyToken?: string;\r\n  sellAmount?: string;\r\n  buyAmount?: string;\r\n  takerAddress?: string;\r\n  slippagePercentage?: number;\r\n  gasPrice?: string;\r\n  excludedSources?: string[];\r\n  affiliateAddress?: string;\r\n  skipValidation?: boolean;\r\n  includePriceComparisons?: boolean;\r\n  includedSources?: string[];\r\n}\r\n\r\nexport interface SwapPrice {\r\n  price: string;\r\n  to: string;\r\n  gasPrice: string;\r\n  protocolFee: string;\r\n  orders: Order[];\r\n  buyAmount: string;\r\n  sellAmount: string;\r\n  buyTokenAddress: string;\r\n  sellTokenAddress: string;\r\n  value: string;\r\n  sources: LiquiditySource[];\r\n  gas: string;\r\n  minimumProtocolFee: string;\r\n  estimatedGas: string;\r\n  estimatedGasTokenRefund: string;\r\n  priceComparisons?: PriceComparison[];\r\n  allowanceTarget: string;\r\n  from?: string;\r\n  buyTokenToEthRate?: string;\r\n  sellTokenToEthRate?: string;\r\n}\r\n\r\nexport interface RfqmPrice {\r\n  price: string;\r\n  buyAmount: string;\r\n  sellAmount: string;\r\n  buyTokenAddress: string;\r\n  sellTokenAddress: string;\r\n  allowanceTarget: string;\r\n  liquidityAvailable: boolean;\r\n  gas: string;\r\n}\r\n\r\ntype RfqmPairs = string[];\r\nexport interface RfqmBackendHealthcheckStatusResponse {\r\n  isOperational: boolean;\r\n  pairs: RfqmPairs[];\r\n}\r\nexport interface SwapQuote extends SwapPrice {\r\n  data: string;\r\n}\r\nexport interface RfqmQuote extends RfqmPrice {\r\n  order: SerializedExchangeProxyRfqm;\r\n  orderHash: string;\r\n  type: RfqmTypes.OtcOrder;\r\n}\r\n\r\nexport interface PostRfqmTransactionSubmitSerializedResponse {\r\n  metaTransactionHash: string;\r\n  orderHash: string;\r\n  type: RfqmTypes.OtcOrder;\r\n}\r\n\r\nexport enum RfqmTransactionStates {\r\n  Pending = 'pending',\r\n  Submitted = 'submitted',\r\n  Failed = 'failed',\r\n  Succeeded = 'succeeded',\r\n  Confirmed = 'confirmed',\r\n}\r\nexport interface RfqmTransactionStatusResponse {\r\n  status: RfqmTransactionStates;\r\n  transactions: { hash: string; timestamp: number }[];\r\n}\r\n\r\nexport interface ApproveTokenParams {\r\n  tokenContractAddress: string;\r\n  contractAddressToApprove: string;\r\n  signer: Signer;\r\n  amount?: BigNumberish;\r\n  txOptions?: TransactionOverrides;\r\n}\r\n\r\nexport interface AllowanceParams {\r\n  tokenContractAddress: string;\r\n  contractAddressToApprove: string;\r\n  walletAddress: string;\r\n  signerOrProvider: BaseProvider | Signer;\r\n}\r\n\r\nexport interface SwapSourceParams {\r\n  chainId?: number;\r\n  fetchFn?: Function;\r\n}\r\n\r\nexport interface SwapSourcesResponse {\r\n  records: string[];\r\n}\r\n\r\ninterface ValidationError {\r\n  field: string;\r\n  code: number;\r\n  reason: string;\r\n}\r\n\r\nexport interface RequestError {\r\n  code: number;\r\n  reason: string;\r\n  validationErrors?: ValidationError[];\r\n}\r\n\r\nexport type TransactionOverrides = Overrides & {\r\n  from?: string | Promise<string>;\r\n};\r\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Erc20, Erc20Interface } from \"../Erc20\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nexport class Erc20__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc20Interface {\n    return new utils.Interface(_abi) as Erc20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Erc20 {\n    return new Contract(address, _abi, signerOrProvider) as Erc20;\n  }\n}\n","import { ROOT_STAGING_URL, ROOT_URLS_BY_CHAIN_ID } from './constants';\r\nimport { EXCHANGE_PROXY_ADDRESSES } from './constants';\r\nimport {\r\n  SwapParams,\r\n  RequestError,\r\n  RfqmBackendHealthcheckStatusResponse,\r\n} from './types';\r\n\r\nexport const getRootApiEndpoint = (chainId: number | string): string => {\r\n  if (typeof window === 'undefined') {\r\n    if (process.env.NODE_ENV === 'test') {\r\n      return ROOT_STAGING_URL;\r\n    }\r\n  }\r\n\r\n  const apiUrl = ROOT_URLS_BY_CHAIN_ID[parseInt(chainId.toString(10))];\r\n\r\n  if (!apiUrl) {\r\n    throw new Error(`No API Url for ${chainId}.`);\r\n  }\r\n\r\n  return apiUrl;\r\n};\r\n\r\nexport const validateAmounts = (params: SwapParams) => {\r\n  if (params.buyAmount && params.sellAmount) {\r\n    throw Error(\r\n      'The swap request params requires either a sellAmount or buyAmount. Do not provide both fields.'\r\n    );\r\n  }\r\n\r\n  if (!params.buyAmount && !params.sellAmount) {\r\n    throw Error(\r\n      'The swap request params requires either a sellAmount or buyAmount.'\r\n    );\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const validateResponse = async (response: Response) => {\r\n  if (response.status > 400) {\r\n    throw new Error(`${response.status} ${response.statusText}`);\r\n  }\r\n\r\n  if (response.status === 400) {\r\n    const causes: string[] = [];\r\n    const data: RequestError = await response.json();\r\n\r\n    if (data.validationErrors) {\r\n      data.validationErrors.map(error => {\r\n        const { field, reason } = error;\r\n        causes.push(`${field}: ${reason}.`);\r\n        return undefined;\r\n      });\r\n      const message = `[${data.reason}] ${causes.join(' ')}`;\r\n      throw new Error(message);\r\n    }\r\n\r\n    throw new Error(data.reason);\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const verifyRfqmIsLiveOrThrow = async (\r\n  endpoint: string,\r\n  fetchFn = fetch\r\n) => {\r\n  console.log(endpoint, '<---endpoint');\r\n  const healthUrl = `${endpoint}/rfqm/v1/healthz`;\r\n  const healthResponse = await fetchFn(healthUrl);\r\n  const parsedHealthResponse: RfqmBackendHealthcheckStatusResponse = await healthResponse.json();\r\n\r\n  if (!parsedHealthResponse?.isOperational) {\r\n    throw new Error(`RFQm service is down.`);\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const getExchangeProxyAddress = (chainId: number) => {\r\n  const address: string = EXCHANGE_PROXY_ADDRESSES[chainId];\r\n  if (!address) {\r\n    throw new Error(`Chain ${chainId} not yet supported by 0x API`);\r\n  }\r\n  return address;\r\n};\r\n","export const ERROR_CHAIN_ID_URL_REQUIRED =\r\n  'A chainId is required if the ZeroExSdk class is constructed without an apiUrl.';\r\nexport const ERROR_CHAIN_ID_REQUIRED = 'No chainId provided!';\r\nexport const ERROR_QUOTE_REQUIRED = 'No quote data provided!';\r\nexport const ERROR_SIGNER_REQUIRED = 'No signer provided!';\r\nexport const ERROR_TX_HASH_REQUIRED = 'Transaction hash not provided!';\r\n","import { BigNumber } from '@ethersproject/bignumber';\r\nimport { MaxInt256, MaxUint256 } from '@ethersproject/constants';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { arrayify, splitSignature } from '@ethersproject/bytes';\r\nimport { ContractTransaction } from '@ethersproject/contracts';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport qs from 'qs';\r\nimport { ETH_FAKE_ADDRESS, EXCHANGE_PROXY_ADDRESSES } from './constants';\r\nimport { Erc20__factory } from './contracts';\r\nimport {\r\n  ZeroExSdkOptions,\r\n  FetchPriceOrQuoteArgs,\r\n  SwapPrice,\r\n  RfqmPrice,\r\n  RfqmQuote,\r\n  SwapQuote,\r\n  PostRfqmTransactionSubmitSerializedResponse,\r\n  RfqmTransactionStatusResponse,\r\n  RfqmTypes,\r\n  ApproveTokenParams,\r\n  AllowanceParams,\r\n  RfqmTxStatusArgs,\r\n  FillRfqmOrderArgs,\r\n  FillOrderArgs,\r\n  SwapSourcesResponse,\r\n  SwapSourceParams,\r\n} from './types';\r\nimport {\r\n  validateAmounts,\r\n  validateResponse,\r\n  getRootApiEndpoint,\r\n  verifyRfqmIsLiveOrThrow,\r\n} from './utils';\r\nimport {\r\n  ERROR_CHAIN_ID_REQUIRED,\r\n  ERROR_CHAIN_ID_URL_REQUIRED,\r\n  ERROR_QUOTE_REQUIRED,\r\n  ERROR_SIGNER_REQUIRED,\r\n  ERROR_TX_HASH_REQUIRED,\r\n} from './errors';\r\n\r\nclass ZeroExSdk {\r\n  private ZeroExSdkOptions?: ZeroExSdkOptions;\r\n\r\n  constructor(ZeroExSdkOptions?: ZeroExSdkOptions) {\r\n    this.ZeroExSdkOptions = ZeroExSdkOptions;\r\n  }\r\n\r\n  /**\r\n   * Returns the liquidity sources enabled for a specific chain id.\r\n   * - {@link https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-sources}\r\n   *\r\n   * @param chainId - Chain ID of sources. Optional if ZeroExSdkOptions.apiUrl is defined\r\n   * @param fetchFn: An optional fetch function. Defaults to fetch.\r\n   * @returns An object with the list of sources\r\n   */\r\n  async getSources({\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: SwapSourceParams = {}): Promise<SwapSourcesResponse> {\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n\r\n    if (!endpoint) {\r\n      throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n    }\r\n\r\n    const url = `${endpoint}/swap/v1/sources`;\r\n    const response = await fetchFn(url);\r\n    await validateResponse(response);\r\n    const data: SwapSourcesResponse = await response.json();\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Fetches an indicative price for buying or selling an ERC20 token.\r\n   * - {@link https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-price}\r\n   * - {@link https://docs.0x.org/market-makers/docs/introduction#indicative-pricing}\r\n   *\r\n   * @param params: The request params for the 0x API `/price` endpoint.\r\n   * @param resource: Optional 'swap' or 'rfqm' resource type. Defaults to 'swap'.\r\n   * @param chainId - Chain ID number for this transaction. Optional if ZeroExSdkOptions.apiUrl is defined\r\n   * @param fetchFn: An optional fetch function. Defaults to fetch.\r\n   * @returns The indicative price\r\n   */\r\n  async getIndicativePrice({\r\n    params,\r\n    resource = 'swap',\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: FetchPriceOrQuoteArgs): Promise<SwapPrice | RfqmPrice> {\r\n    validateAmounts(params);\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n\r\n    if (!endpoint) {\r\n      throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n    }\r\n\r\n    if (resource === 'rfqm') {\r\n      verifyRfqmIsLiveOrThrow(endpoint);\r\n      const url = `${endpoint}/rfqm/v1/price?${qs.stringify(params)}`;\r\n      const response = await fetchFn(url, {\r\n        headers: {\r\n          ...(this.ZeroExSdkOptions?.apiKey && {\r\n            '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n          }),\r\n        },\r\n      });\r\n      await validateResponse(response);\r\n      const data: RfqmPrice = await response.json();\r\n      return data;\r\n    }\r\n\r\n    const url = `${endpoint}/swap/v1/price?${qs.stringify(params)}`;\r\n    const response = await fetchFn(url);\r\n    await validateResponse(response);\r\n    const data: SwapPrice = await response.json();\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Fetches a firm quote for buying or selling an ERC20 token.\r\n   * - {@link https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-quote}\r\n   * - {@link https://docs.0x.org/market-makers/docs/introduction#firm-quotes}\r\n   *\r\n   * @param params: The request params for the 0x API `/quote` endpoint.\r\n   * @param resource: Optional 'swap' or 'rfqm' resource type. Defaults to 'swap'.\r\n   * @param chainId - Chain ID number for this transaction. Optional if ZeroExSdkOptions.apiUrl is defined\r\n   * @param fetchFn: An optional fetch function.\r\n   * @returns The firm quote\r\n   */\r\n  async getFirmQuote({\r\n    params,\r\n    resource = 'swap',\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: FetchPriceOrQuoteArgs): Promise<SwapQuote | RfqmQuote> {\r\n    validateAmounts(params);\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n\r\n    if (!endpoint) {\r\n      throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n    }\r\n\r\n    if (resource === 'rfqm') {\r\n      verifyRfqmIsLiveOrThrow(endpoint);\r\n      const url = `${endpoint}/rfqm/v1/quote?${qs.stringify(params)}`;\r\n      const response = await fetchFn(url, {\r\n        headers: {\r\n          ...(this.ZeroExSdkOptions?.apiKey && {\r\n            '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n          }),\r\n        },\r\n      });\r\n      await validateResponse(response);\r\n      const data: RfqmQuote = await response.json();\r\n      return data;\r\n    }\r\n\r\n    const url = `${endpoint}/swap/v1/quote?${qs.stringify(params)}`;\r\n    const response = await fetchFn(url);\r\n\r\n    await validateResponse(response);\r\n\r\n    const data: SwapQuote = await response.json();\r\n\r\n    return data;\r\n  }\r\n  /**\r\n   * Approves 0x's smart contracts to facilitate transactions on signer's behalf for the token contract address specified.\r\n   * - {@link https://docs.0x.org/0x-api-swap/advanced-topics/how-to-set-your-token-allowances}\r\n   * - {@link https://tokenallowance.io/}\r\n   *\r\n   * @param tokenContractAddress: Token Address for appproval.\r\n   * @param contractAddressToApprove: ZeroEx Exchange Proxy Address - Varies per network and can be obtained via utils function `getExchangeProxyAddress(chainId)`.\r\n   * @param signer: Transaction signer.\r\n   * @param amount: Amount to approve. Defaults to MaxInt256 if not specified\r\n   * @returns The contract transaction Promise.\r\n   */\r\n  async approveToken({\r\n    tokenContractAddress,\r\n    contractAddressToApprove,\r\n    signer,\r\n    amount,\r\n    txOptions,\r\n  }: ApproveTokenParams): Promise<ContractTransaction> {\r\n    const erc20 = Erc20__factory.connect(tokenContractAddress, signer);\r\n    const tx = erc20.approve(contractAddressToApprove, amount ?? MaxInt256, {\r\n      ...txOptions,\r\n    });\r\n\r\n    return tx;\r\n  }\r\n  /**\r\n   * Gets allowance amount for a specified token per wallet address.\r\n   * @param tokenContractAddress: Token Address for approval.\r\n   * @param contractAddressToApprove: ZeroEx Exchange Proxy Address - Varies per network and can be obtained via utils function `getExchangeProxyAddress(chainId)`.\r\n   * @param walletAddress: Wallet address to get allowance for.\r\n   * @param signerOrProvider: Optional - signer or provider.\r\n   * @returns Allowance\r\n   */\r\n  async getAllowance({\r\n    tokenContractAddress,\r\n    contractAddressToApprove,\r\n    walletAddress,\r\n    signerOrProvider,\r\n  }: AllowanceParams): Promise<BigNumber> {\r\n    const erc20 = Erc20__factory.connect(\r\n      tokenContractAddress,\r\n      signerOrProvider\r\n    );\r\n\r\n    if (tokenContractAddress.toLowerCase() === ETH_FAKE_ADDRESS) {\r\n      return MaxUint256;\r\n    }\r\n\r\n    const approvalAmount = await erc20.allowance(\r\n      walletAddress,\r\n      contractAddressToApprove\r\n    );\r\n\r\n    return approvalAmount;\r\n  }\r\n\r\n  /**\r\n   * Submits the ERC-20 token swap on chain\r\n   * @param quote - The data returned from getFirmQuote()\r\n   * @param signer - Signer who will send the transaction\r\n   * @param chainId - Chain ID number for this transaction.\r\n   * @returns The transaction response\r\n   */\r\n  async fillOrder({\r\n    quote,\r\n    signer,\r\n    chainId,\r\n    txOptions,\r\n  }: FillOrderArgs): Promise<TransactionResponse> {\r\n    if (!quote) throw new Error(ERROR_QUOTE_REQUIRED);\r\n    if (!signer) throw new Error(ERROR_SIGNER_REQUIRED);\r\n    if (!chainId) throw new Error(ERROR_CHAIN_ID_REQUIRED);\r\n\r\n    const txResponse = await signer.sendTransaction({\r\n      gasLimit: quote.gas,\r\n      gasPrice: quote.gasPrice,\r\n      ...(txOptions || {}),\r\n      // don't override with options\r\n      to: quote.to,\r\n      data: quote.data,\r\n      value: quote.value,\r\n      chainId,\r\n    });\r\n\r\n    return txResponse;\r\n  }\r\n\r\n  /**\r\n   * Signs the RFQm order and submits it to authorize 0x to perform the swap on behalf of signers\r\n   * - {@link https://docs.0x.org/market-makers/guides/signing-0x-orders}\r\n   * - {@link https://docs.0x.org/market-makers/docs/introduction#rfq-m-1}\r\n   * @param quote - The data returned from getFirmQuote()\r\n   * @param chainId: Chain ID number for this transaction.\r\n   * @param fetchFn: An optional fetch function.\r\n   * @returns The transaction response after RFQm fill submission\r\n   */\r\n  async fillRfqmOrder({\r\n    quote,\r\n    chainId,\r\n    signer,\r\n    fetchFn = fetch,\r\n  }: FillRfqmOrderArgs): Promise<PostRfqmTransactionSubmitSerializedResponse> {\r\n    if (!quote) {\r\n      throw new Error(ERROR_QUOTE_REQUIRED);\r\n    }\r\n\r\n    const rawSignature = await signer.signMessage(arrayify(quote.orderHash));\r\n    const { v, r, s } = splitSignature(rawSignature);\r\n    const unpackedSignedSignature = {\r\n      v,\r\n      r,\r\n      s,\r\n      signatureType: 3,\r\n    };\r\n\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n    if (!endpoint) throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n\r\n    const url = `${endpoint}/rfqm/v1/submit`;\r\n    const body = {\r\n      signature: unpackedSignedSignature,\r\n      order: quote.order,\r\n      type: RfqmTypes.OtcOrder,\r\n    };\r\n\r\n    const response = await fetchFn(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n          'Content-Type': 'application/json',\r\n        }),\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    await validateResponse(response);\r\n\r\n    const data: PostRfqmTransactionSubmitSerializedResponse = await response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Fetches the RFQm order transaction status\r\n   * @param txHash: The order transaction hash from RFQm fill submission\r\n   * @param chainId: Chain ID number for this transaction.\r\n   * @param fetchFn: An optional fetch function.\r\n   * @returns The transaction status and all transactions executed for the RFQm order\r\n   */\r\n  async getRfqmTxStatus({\r\n    txHash,\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: RfqmTxStatusArgs): Promise<RfqmTransactionStatusResponse> {\r\n    if (!txHash) {\r\n      throw new Error(ERROR_TX_HASH_REQUIRED);\r\n    }\r\n\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n    if (!endpoint) throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n\r\n    const statusUrl = `${endpoint}/rfqm/v1/status/${txHash}`;\r\n    const response = await fetchFn(statusUrl, {\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n        }),\r\n      },\r\n    });\r\n    const data: RfqmTransactionStatusResponse = await response.json();\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport { ZeroExSdk, EXCHANGE_PROXY_ADDRESSES };\r\n"],"names":["RfqmTypes","RfqmTransactionStates","ROOT_URLS_BY_CHAIN_ID","1","3","137","56","10","250","42220","43114","_abi","constant","inputs","name","outputs","type","payable","stateMutability","anonymous","indexed","Erc20__factory","createInterface","utils","Interface","connect","address","signerOrProvider","Contract","getRootApiEndpoint","chainId","apiUrl","parseInt","toString","Error","validateAmounts","params","buyAmount","sellAmount","validateResponse","response","status","_context","statusText","causes","json","data","validationErrors","map","error","push","field","reason","message","join","undefined","verifyRfqmIsLiveOrThrow","endpoint","fetchFn","fetch","console","log","healthUrl","_context2","healthResponse","parsedHealthResponse","isOperational","ERROR_CHAIN_ID_URL_REQUIRED","ZeroExSdk","ZeroExSdkOptions","this","getSources","_ref","_this$ZeroExSdkOption","url","getIndicativePrice","resource","_this$ZeroExSdkOption2","qs","stringify","headers","apiKey","0x-api-key","_this$ZeroExSdkOption4","getFirmQuote","_this$ZeroExSdkOption5","_context3","_this$ZeroExSdkOption7","approveToken","contractAddressToApprove","amount","txOptions","erc20","tokenContractAddress","signer","tx","approve","MaxInt256","getAllowance","walletAddress","toLowerCase","_context5","MaxUint256","allowance","fillOrder","quote","_context6","sendTransaction","gasLimit","gas","gasPrice","to","value","fillRfqmOrder","_context7","signMessage","arrayify","orderHash","_splitSignature","splitSignature","unpackedSignedSignature","v","r","s","signatureType","_this$ZeroExSdkOption8","body","signature","order","OtcOrder","method","_this$ZeroExSdkOption10","Content-Type","JSON","getRfqmTxStatus","txHash","_context8","_this$ZeroExSdkOption11","statusUrl","_this$ZeroExSdkOption13","5"],"mappings":"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"}