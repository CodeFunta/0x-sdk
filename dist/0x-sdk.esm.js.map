{"version":3,"file":"0x-sdk.esm.js","sources":["../src/constants.ts","../src/contracts/factories/Erc20__factory.ts","../src/errors.ts","../src/types.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["export const ETH_FAKE_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\r\n\r\nexport const DAI_CONTRACT_ADDRESS_MAINNET =\r\n  '0x6b175474e89094c44da98b954eedeac495271d0f';\r\n\r\nexport const ROOT_STAGING_URL = 'https://staging.api.0x.org';\r\n\r\nexport const ROOT_URLS_BY_CHAIN_ID: { [key: string]: string } = {\r\n  '1': 'https://api.0x.org',\r\n  '3': 'https://ropsten.api.0x.org',\r\n  '137': 'https://polygon.api.0x.org',\r\n  '56': 'https://bsc.api.0x.org',\r\n  '10': 'https://optimism.api.0x.org',\r\n  '250': 'https://fantom.api.0x.org',\r\n  '42220': 'https://celo.api.0x.org',\r\n  '43114': 'https://avalanche.api.0x.org',\r\n};\r\n\r\nexport const CHAIN_IDS = {\r\n  MAINNET: 1,\r\n  ROPSTEN: 3,\r\n  GOERLI: 5,\r\n  OPTIMISM: 10,\r\n  BSC: 56,\r\n  POLYGON: 137,\r\n  FANTOM: 250,\r\n  CELO: 42220,\r\n  AVALANCHE: 43114,\r\n};\r\n\r\nexport const EXCHANGE_PROXY_ADDRESSES: Record<number, string> = {\r\n  1: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  5: '0xf91bb752490473b8342a3e964e855b9f9a2a668e',\r\n  10: '0xdef1abe32c034e558cdd535791643c58a13acc10',\r\n  56: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  137: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  250: '0xdef189deaef76e379df891899eb5a00a94cbc250',\r\n  42220: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n  43114: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n};\r\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Erc20, Erc20Interface } from \"../Erc20\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nexport class Erc20__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc20Interface {\n    return new utils.Interface(_abi) as Erc20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Erc20 {\n    return new Contract(address, _abi, signerOrProvider) as Erc20;\n  }\n}\n","export const ERROR_CHAIN_ID_URL_REQUIRED =\r\n  'A chainId is required if the ZeroExSdk class is constructed without an apiUrl.';\r\nexport const ERROR_CHAIN_ID_REQUIRED = 'No chainId provided!';\r\nexport const ERROR_QUOTE_REQUIRED = 'No quote data provided!';\r\nexport const ERROR_SIGNER_REQUIRED = 'No signer provided!';\r\nexport const ERROR_TX_HASH_REQUIRED = 'Transaction hash not provided!';\r\n","import { Overrides } from '@ethersproject/contracts';\r\nimport { BaseProvider, TransactionRequest } from '@ethersproject/providers';\r\nimport { BigNumberish, Signer } from 'ethers';\r\n\r\nexport interface ZeroExSdkOptions {\r\n  apiUrl?: string;\r\n  apiUrls?: { [key: number]: string };\r\n  apiKey?: string;\r\n}\r\n\r\nexport type ResourceType = 'swap' | 'rfqm';\r\n\r\nexport interface FetchPriceOrQuoteArgs {\r\n  params: SwapParams;\r\n  chainId?: number;\r\n  resource?: ResourceType;\r\n  fetchFn?: Function;\r\n}\r\n\r\nexport interface RfqmTxStatusArgs {\r\n  txHash: string;\r\n  chainId?: number;\r\n  fetchFn?: Function;\r\n}\r\n\r\nexport interface FillOrderArgs {\r\n  quote: SwapQuote;\r\n  chainId: number;\r\n  signer: Signer;\r\n  txOptions?: TransactionRequest;\r\n}\r\n\r\nexport interface FillRfqmOrderArgs extends Omit<FillOrderArgs, 'quote'> {\r\n  quote: RfqmQuote;\r\n  fetchFn?: Function;\r\n}\r\n\r\ninterface PriceComparison {\r\n  name: string;\r\n  price: string | null;\r\n  gas: string | null;\r\n}\r\ninterface Order {\r\n  makerToken: string;\r\n  takerToken: string;\r\n  makerAmount: string;\r\n  takerAmount: string;\r\n  fillData: {\r\n    tokenAddressPath: string[];\r\n    router: string;\r\n  };\r\n  source: string;\r\n  sourcePathId: string;\r\n  type: number;\r\n}\r\n\r\ninterface LiquiditySource {\r\n  name: string;\r\n  proportion: string;\r\n}\r\n\r\nexport enum RfqmTypes {\r\n  MetaTransaction = 'metatransaction',\r\n  OtcOrder = 'otc',\r\n}\r\nexport interface SerializedExchangeProxyRfqm {\r\n  makerToken: string;\r\n  takerToken: string;\r\n  makerAmount: string;\r\n  takerAmount: string;\r\n  maker: string;\r\n  taker: string;\r\n  txOrigin: string;\r\n  expiryAndNonce: string;\r\n  verifyingContract: string;\r\n  chainId: number;\r\n  domain: EIP712DomainWithDefaultSchema;\r\n}\r\n\r\nexport interface EIP712DomainWithDefaultSchema {\r\n  name?: string;\r\n  version?: string;\r\n  chainId: number;\r\n  verifyingContract: string;\r\n}\r\nexport interface SwapParams {\r\n  sellToken?: string;\r\n  buyToken?: string;\r\n  sellAmount?: string;\r\n  buyAmount?: string;\r\n  takerAddress?: string;\r\n  slippagePercentage?: number;\r\n  gasPrice?: string;\r\n  excludedSources?: string[];\r\n  affiliateAddress?: string;\r\n  skipValidation?: boolean;\r\n  includePriceComparisons?: boolean;\r\n  includedSources?: string[];\r\n}\r\n\r\nexport interface SwapPrice {\r\n  price: string;\r\n  to: string;\r\n  gasPrice: string;\r\n  protocolFee: string;\r\n  orders: Order[];\r\n  buyAmount: string;\r\n  sellAmount: string;\r\n  buyTokenAddress: string;\r\n  sellTokenAddress: string;\r\n  value: string;\r\n  sources: LiquiditySource[];\r\n  gas: string;\r\n  minimumProtocolFee: string;\r\n  estimatedGas: string;\r\n  estimatedGasTokenRefund: string;\r\n  priceComparisons?: PriceComparison[];\r\n  allowanceTarget: string;\r\n  from?: string;\r\n  buyTokenToEthRate?: string;\r\n  sellTokenToEthRate?: string;\r\n}\r\n\r\nexport interface RfqmPrice {\r\n  price: string;\r\n  buyAmount: string;\r\n  sellAmount: string;\r\n  buyTokenAddress: string;\r\n  sellTokenAddress: string;\r\n  allowanceTarget: string;\r\n  liquidityAvailable: boolean;\r\n  gas: string;\r\n}\r\n\r\ntype RfqmPairs = string[];\r\nexport interface RfqmBackendHealthcheckStatusResponse {\r\n  isOperational: boolean;\r\n  pairs: RfqmPairs[];\r\n}\r\nexport interface SwapQuote extends SwapPrice {\r\n  data: string;\r\n}\r\nexport interface RfqmQuote extends RfqmPrice {\r\n  order: SerializedExchangeProxyRfqm;\r\n  orderHash: string;\r\n  type: RfqmTypes.OtcOrder;\r\n}\r\n\r\nexport interface PostRfqmTransactionSubmitSerializedResponse {\r\n  metaTransactionHash: string;\r\n  orderHash: string;\r\n  type: RfqmTypes.OtcOrder;\r\n}\r\n\r\nexport enum RfqmTransactionStates {\r\n  Pending = 'pending',\r\n  Submitted = 'submitted',\r\n  Failed = 'failed',\r\n  Succeeded = 'succeeded',\r\n  Confirmed = 'confirmed',\r\n}\r\nexport interface RfqmTransactionStatusResponse {\r\n  status: RfqmTransactionStates;\r\n  transactions: { hash: string; timestamp: number }[];\r\n}\r\n\r\nexport interface ApproveTokenParams {\r\n  tokenContractAddress: string;\r\n  contractAddressToApprove: string;\r\n  signer: Signer;\r\n  amount?: BigNumberish;\r\n  txOptions?: TransactionOverrides;\r\n}\r\n\r\nexport interface AllowanceParams {\r\n  tokenContractAddress: string;\r\n  contractAddressToApprove: string;\r\n  walletAddress: string;\r\n  signerOrProvider: BaseProvider | Signer;\r\n}\r\n\r\nexport interface SwapSourceParams {\r\n  chainId?: number;\r\n  fetchFn?: Function;\r\n}\r\n\r\nexport interface SwapSourcesResponse {\r\n  records: string[];\r\n}\r\n\r\ninterface ValidationError {\r\n  field: string;\r\n  code: number;\r\n  reason: string;\r\n}\r\n\r\nexport interface RequestError {\r\n  code: number;\r\n  reason: string;\r\n  validationErrors?: ValidationError[];\r\n}\r\n\r\nexport type TransactionOverrides = Overrides & {\r\n  from?: string | Promise<string>;\r\n};\r\n","import { ROOT_STAGING_URL, ROOT_URLS_BY_CHAIN_ID } from './constants';\r\nimport { EXCHANGE_PROXY_ADDRESSES } from './constants';\r\nimport {\r\n  SwapParams,\r\n  RequestError,\r\n  RfqmBackendHealthcheckStatusResponse,\r\n} from './types';\r\n\r\nexport const getRootApiEndpoint = (chainId: number | string): string => {\r\n  if (typeof window === 'undefined') {\r\n    if (process.env.NODE_ENV === 'test') {\r\n      return ROOT_STAGING_URL;\r\n    }\r\n  }\r\n\r\n  const apiUrl = ROOT_URLS_BY_CHAIN_ID[parseInt(chainId.toString(10))];\r\n\r\n  if (!apiUrl) {\r\n    throw new Error(`No API Url for ${chainId}.`);\r\n  }\r\n\r\n  return apiUrl;\r\n};\r\n\r\nexport const validateAmounts = (params: SwapParams) => {\r\n  if (params.buyAmount && params.sellAmount) {\r\n    throw Error(\r\n      'The swap request params requires either a sellAmount or buyAmount. Do not provide both fields.'\r\n    );\r\n  }\r\n\r\n  if (!params.buyAmount && !params.sellAmount) {\r\n    throw Error(\r\n      'The swap request params requires either a sellAmount or buyAmount.'\r\n    );\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const validateResponse = async (response: Response) => {\r\n  if (response.status > 400) {\r\n    throw new Error(`${response.status} ${response.statusText}`);\r\n  }\r\n\r\n  if (response.status === 400) {\r\n    const causes: string[] = [];\r\n    const data: RequestError = await response.json();\r\n\r\n    if (data.validationErrors) {\r\n      data.validationErrors.map(error => {\r\n        const { field, reason } = error;\r\n        causes.push(`${field}: ${reason}.`);\r\n        return undefined;\r\n      });\r\n      const message = `[${data.reason}] ${causes.join(' ')}`;\r\n      throw new Error(message);\r\n    }\r\n\r\n    throw new Error(data.reason);\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const verifyRfqmIsLiveOrThrow = async (\r\n  endpoint: string,\r\n  fetchFn = fetch\r\n) => {\r\n  console.log(endpoint, '<---endpoint');\r\n  const healthUrl = `${endpoint}/rfqm/v1/healthz`;\r\n  const healthResponse = await fetchFn(healthUrl);\r\n  const parsedHealthResponse: RfqmBackendHealthcheckStatusResponse = await healthResponse.json();\r\n\r\n  if (!parsedHealthResponse?.isOperational) {\r\n    throw new Error(`RFQm service is down.`);\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const getExchangeProxyAddress = (chainId: number) => {\r\n  const address: string = EXCHANGE_PROXY_ADDRESSES[chainId];\r\n  if (!address) {\r\n    throw new Error(`Chain ${chainId} not yet supported by 0x API`);\r\n  }\r\n  return address;\r\n};\r\n","import { BigNumber } from '@ethersproject/bignumber';\r\nimport { arrayify, splitSignature } from '@ethersproject/bytes';\r\nimport { MaxInt256, MaxUint256 } from '@ethersproject/constants';\r\nimport { ContractTransaction } from '@ethersproject/contracts';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport qs from 'qs';\r\nimport { ETH_FAKE_ADDRESS, EXCHANGE_PROXY_ADDRESSES } from './constants';\r\nimport { Erc20__factory } from './contracts';\r\nimport {\r\n  ERROR_CHAIN_ID_REQUIRED,\r\n  ERROR_CHAIN_ID_URL_REQUIRED,\r\n  ERROR_QUOTE_REQUIRED,\r\n  ERROR_SIGNER_REQUIRED,\r\n  ERROR_TX_HASH_REQUIRED,\r\n} from './errors';\r\nimport {\r\n  AllowanceParams,\r\n  ApproveTokenParams,\r\n  FetchPriceOrQuoteArgs,\r\n  FillOrderArgs,\r\n  FillRfqmOrderArgs,\r\n  PostRfqmTransactionSubmitSerializedResponse,\r\n  RfqmPrice,\r\n  RfqmQuote,\r\n  RfqmTransactionStatusResponse,\r\n  RfqmTxStatusArgs,\r\n  RfqmTypes,\r\n  SwapPrice,\r\n  SwapQuote,\r\n  SwapSourceParams,\r\n  SwapSourcesResponse,\r\n  ZeroExSdkOptions,\r\n} from './types';\r\nimport {\r\n  getRootApiEndpoint,\r\n  validateAmounts,\r\n  validateResponse,\r\n  verifyRfqmIsLiveOrThrow,\r\n} from './utils';\r\n\r\nclass ZeroExSdk {\r\n  private ZeroExSdkOptions?: ZeroExSdkOptions;\r\n\r\n  constructor(ZeroExSdkOptions?: ZeroExSdkOptions) {\r\n    this.ZeroExSdkOptions = ZeroExSdkOptions;\r\n  }\r\n\r\n  /**\r\n   * Returns the liquidity sources enabled for a specific chain id.\r\n   * - {@link https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-sources}\r\n   *\r\n   * @param chainId - Chain ID of sources. Optional if ZeroExSdkOptions.apiUrl is defined\r\n   * @param fetchFn: An optional fetch function. Defaults to fetch.\r\n   * @returns An object with the list of sources\r\n   */\r\n  async getSources({\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: SwapSourceParams = {}): Promise<SwapSourcesResponse> {\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n\r\n    if (!endpoint) {\r\n      throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n    }\r\n\r\n    const url = `${endpoint}/swap/v1/sources`;\r\n    const response = await fetchFn(url, {\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n        }),\r\n      },\r\n    });\r\n    await validateResponse(response);\r\n    const data: SwapSourcesResponse = await response.json();\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Fetches an indicative price for buying or selling an ERC20 token.\r\n   * - {@link https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-price}\r\n   * - {@link https://docs.0x.org/market-makers/docs/introduction#indicative-pricing}\r\n   *\r\n   * @param params: The request params for the 0x API `/price` endpoint.\r\n   * @param resource: Optional 'swap' or 'rfqm' resource type. Defaults to 'swap'.\r\n   * @param chainId - Chain ID number for this transaction. Optional if ZeroExSdkOptions.apiUrl is defined\r\n   * @param fetchFn: An optional fetch function. Defaults to fetch.\r\n   * @returns The indicative price\r\n   */\r\n  async getIndicativePrice({\r\n    params,\r\n    resource = 'swap',\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: FetchPriceOrQuoteArgs): Promise<SwapPrice | RfqmPrice> {\r\n    validateAmounts(params);\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n\r\n    if (!endpoint) {\r\n      throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n    }\r\n\r\n    if (resource === 'rfqm') {\r\n      verifyRfqmIsLiveOrThrow(endpoint);\r\n      const url = `${endpoint}/rfqm/v1/price?${qs.stringify(params)}`;\r\n      const response = await fetchFn(url, {\r\n        headers: {\r\n          ...(this.ZeroExSdkOptions?.apiKey && {\r\n            '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n          }),\r\n        },\r\n      });\r\n      await validateResponse(response);\r\n      const data: RfqmPrice = await response.json();\r\n      return data;\r\n    }\r\n\r\n    const url = `${endpoint}/swap/v1/price?${qs.stringify(params)}`;\r\n    const response = await fetchFn(url, {\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n        }),\r\n      },\r\n    });\r\n    await validateResponse(response);\r\n    const data: SwapPrice = await response.json();\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Fetches a firm quote for buying or selling an ERC20 token.\r\n   * - {@link https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-quote}\r\n   * - {@link https://docs.0x.org/market-makers/docs/introduction#firm-quotes}\r\n   *\r\n   * @param params: The request params for the 0x API `/quote` endpoint.\r\n   * @param resource: Optional 'swap' or 'rfqm' resource type. Defaults to 'swap'.\r\n   * @param chainId - Chain ID number for this transaction. Optional if ZeroExSdkOptions.apiUrl is defined\r\n   * @param fetchFn: An optional fetch function.\r\n   * @returns The firm quote\r\n   */\r\n  async getFirmQuote({\r\n    params,\r\n    resource = 'swap',\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: FetchPriceOrQuoteArgs): Promise<SwapQuote | RfqmQuote> {\r\n    validateAmounts(params);\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n\r\n    if (!endpoint) {\r\n      throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n    }\r\n\r\n    if (resource === 'rfqm') {\r\n      verifyRfqmIsLiveOrThrow(endpoint);\r\n      const url = `${endpoint}/rfqm/v1/quote?${qs.stringify(params)}`;\r\n      const response = await fetchFn(url, {\r\n        headers: {\r\n          ...(this.ZeroExSdkOptions?.apiKey && {\r\n            '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n          }),\r\n        },\r\n      });\r\n      await validateResponse(response);\r\n      const data: RfqmQuote = await response.json();\r\n      return data;\r\n    }\r\n\r\n    const url = `${endpoint}/swap/v1/quote?${qs.stringify(params)}`;\r\n    const response = await fetchFn(url, {\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n        }),\r\n      },\r\n    });\r\n\r\n    await validateResponse(response);\r\n\r\n    const data: SwapQuote = await response.json();\r\n\r\n    return data;\r\n  }\r\n  /**\r\n   * Approves 0x's smart contracts to facilitate transactions on signer's behalf for the token contract address specified.\r\n   * - {@link https://docs.0x.org/0x-api-swap/advanced-topics/how-to-set-your-token-allowances}\r\n   * - {@link https://tokenallowance.io/}\r\n   *\r\n   * @param tokenContractAddress: Token Address for appproval.\r\n   * @param contractAddressToApprove: ZeroEx Exchange Proxy Address - Varies per network and can be obtained via utils function `getExchangeProxyAddress(chainId)`.\r\n   * @param signer: Transaction signer.\r\n   * @param amount: Amount to approve. Defaults to MaxInt256 if not specified\r\n   * @returns The contract transaction Promise.\r\n   */\r\n  async approveToken({\r\n    tokenContractAddress,\r\n    contractAddressToApprove,\r\n    signer,\r\n    amount,\r\n    txOptions,\r\n  }: ApproveTokenParams): Promise<ContractTransaction> {\r\n    const erc20 = Erc20__factory.connect(tokenContractAddress, signer);\r\n    const tx = erc20.approve(contractAddressToApprove, amount ?? MaxInt256, {\r\n      ...txOptions,\r\n    });\r\n\r\n    return tx;\r\n  }\r\n  /**\r\n   * Gets allowance amount for a specified token per wallet address.\r\n   * @param tokenContractAddress: Token Address for approval.\r\n   * @param contractAddressToApprove: ZeroEx Exchange Proxy Address - Varies per network and can be obtained via utils function `getExchangeProxyAddress(chainId)`.\r\n   * @param walletAddress: Wallet address to get allowance for.\r\n   * @param signerOrProvider: Optional - signer or provider.\r\n   * @returns Allowance\r\n   */\r\n  async getAllowance({\r\n    tokenContractAddress,\r\n    contractAddressToApprove,\r\n    walletAddress,\r\n    signerOrProvider,\r\n  }: AllowanceParams): Promise<BigNumber> {\r\n    const erc20 = Erc20__factory.connect(\r\n      tokenContractAddress,\r\n      signerOrProvider\r\n    );\r\n\r\n    if (tokenContractAddress.toLowerCase() === ETH_FAKE_ADDRESS) {\r\n      return MaxUint256;\r\n    }\r\n\r\n    const approvalAmount = await erc20.allowance(\r\n      walletAddress,\r\n      contractAddressToApprove\r\n    );\r\n\r\n    return approvalAmount;\r\n  }\r\n\r\n  /**\r\n   * Submits the ERC-20 token swap on chain\r\n   * @param quote - The data returned from getFirmQuote()\r\n   * @param signer - Signer who will send the transaction\r\n   * @param chainId - Chain ID number for this transaction.\r\n   * @returns The transaction response\r\n   */\r\n  async fillOrder({\r\n    quote,\r\n    signer,\r\n    chainId,\r\n    txOptions,\r\n  }: FillOrderArgs): Promise<TransactionResponse> {\r\n    if (!quote) throw new Error(ERROR_QUOTE_REQUIRED);\r\n    if (!signer) throw new Error(ERROR_SIGNER_REQUIRED);\r\n    if (!chainId) throw new Error(ERROR_CHAIN_ID_REQUIRED);\r\n\r\n    const txResponse = await signer.sendTransaction({\r\n      gasLimit: quote.gas,\r\n      gasPrice: quote.gasPrice,\r\n      ...(txOptions || {}),\r\n      // don't override with options\r\n      to: quote.to,\r\n      data: quote.data,\r\n      value: quote.value,\r\n      chainId,\r\n    });\r\n\r\n    return txResponse;\r\n  }\r\n\r\n  /**\r\n   * Signs the RFQm order and submits it to authorize 0x to perform the swap on behalf of signers\r\n   * - {@link https://docs.0x.org/market-makers/guides/signing-0x-orders}\r\n   * - {@link https://docs.0x.org/market-makers/docs/introduction#rfq-m-1}\r\n   * @param quote - The data returned from getFirmQuote()\r\n   * @param chainId: Chain ID number for this transaction.\r\n   * @param fetchFn: An optional fetch function.\r\n   * @returns The transaction response after RFQm fill submission\r\n   */\r\n  async fillRfqmOrder({\r\n    quote,\r\n    chainId,\r\n    signer,\r\n    fetchFn = fetch,\r\n  }: FillRfqmOrderArgs): Promise<PostRfqmTransactionSubmitSerializedResponse> {\r\n    if (!quote) {\r\n      throw new Error(ERROR_QUOTE_REQUIRED);\r\n    }\r\n\r\n    const rawSignature = await signer.signMessage(arrayify(quote.orderHash));\r\n    const { v, r, s } = splitSignature(rawSignature);\r\n    const unpackedSignedSignature = {\r\n      v,\r\n      r,\r\n      s,\r\n      signatureType: 3,\r\n    };\r\n\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n    if (!endpoint) throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n\r\n    const url = `${endpoint}/rfqm/v1/submit`;\r\n    const body = {\r\n      signature: unpackedSignedSignature,\r\n      order: quote.order,\r\n      type: RfqmTypes.OtcOrder,\r\n    };\r\n\r\n    const response = await fetchFn(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n          'Content-Type': 'application/json',\r\n        }),\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    await validateResponse(response);\r\n\r\n    const data: PostRfqmTransactionSubmitSerializedResponse = await response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Fetches the RFQm order transaction status\r\n   * @param txHash: The order transaction hash from RFQm fill submission\r\n   * @param chainId: Chain ID number for this transaction.\r\n   * @param fetchFn: An optional fetch function.\r\n   * @returns The transaction status and all transactions executed for the RFQm order\r\n   */\r\n  async getRfqmTxStatus({\r\n    txHash,\r\n    chainId,\r\n    fetchFn = fetch,\r\n  }: RfqmTxStatusArgs): Promise<RfqmTransactionStatusResponse> {\r\n    if (!txHash) {\r\n      throw new Error(ERROR_TX_HASH_REQUIRED);\r\n    }\r\n\r\n    const endpoint = chainId\r\n      ? getRootApiEndpoint(chainId)\r\n      : this.ZeroExSdkOptions?.apiUrl;\r\n    if (!endpoint) throw new Error(ERROR_CHAIN_ID_URL_REQUIRED);\r\n\r\n    const statusUrl = `${endpoint}/rfqm/v1/status/${txHash}`;\r\n    const response = await fetchFn(statusUrl, {\r\n      headers: {\r\n        ...(this.ZeroExSdkOptions?.apiKey && {\r\n          '0x-api-key': this.ZeroExSdkOptions?.apiKey,\r\n        }),\r\n      },\r\n    });\r\n    const data: RfqmTransactionStatusResponse = await response.json();\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport { EXCHANGE_PROXY_ADDRESSES, ZeroExSdk };\r\n\r\n"],"names":["ETH_FAKE_ADDRESS","ROOT_STAGING_URL","ROOT_URLS_BY_CHAIN_ID","EXCHANGE_PROXY_ADDRESSES","_abi","constant","inputs","name","outputs","type","payable","stateMutability","anonymous","indexed","Erc20__factory","createInterface","utils","Interface","connect","address","signerOrProvider","Contract","ERROR_CHAIN_ID_URL_REQUIRED","ERROR_CHAIN_ID_REQUIRED","ERROR_QUOTE_REQUIRED","ERROR_SIGNER_REQUIRED","ERROR_TX_HASH_REQUIRED","RfqmTypes","RfqmTransactionStates","getRootApiEndpoint","chainId","window","process","env","NODE_ENV","apiUrl","parseInt","toString","Error","validateAmounts","params","buyAmount","sellAmount","undefined","validateResponse","response","status","statusText","causes","json","data","validationErrors","map","error","field","reason","push","message","join","verifyRfqmIsLiveOrThrow","endpoint","fetchFn","fetch","console","log","healthUrl","healthResponse","parsedHealthResponse","isOperational","ZeroExSdk","ZeroExSdkOptions","getSources","url","headers","apiKey","getIndicativePrice","resource","qs","stringify","getFirmQuote","approveToken","tokenContractAddress","contractAddressToApprove","signer","amount","txOptions","erc20","tx","approve","MaxInt256","getAllowance","walletAddress","toLowerCase","MaxUint256","allowance","approvalAmount","fillOrder","quote","sendTransaction","gasLimit","gas","gasPrice","to","value","txResponse","fillRfqmOrder","signMessage","arrayify","orderHash","rawSignature","splitSignature","v","r","s","unpackedSignedSignature","signatureType","body","signature","order","OtcOrder","method","JSON","getRfqmTxStatus","txHash","statusUrl"],"mappings":"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"}